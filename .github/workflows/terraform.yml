name: 'Terraform'

on:
  push:
    branches:
      - main
    paths:
      - '**.tf'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - '**.tf'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_WORKSPACE: 'dev'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    concurrency: 
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Debug Directory Structure
      run: |
        echo "Workspace Directory Contents:"
        ls -la environments/${TF_WORKSPACE}
        echo "Root Directory Contents:"
        ls -la
        echo "Current Working Directory:"
        pwd

    - name: Terraform Init
      id: init
      working-directory: environments/${TF_WORKSPACE}
      run: |
        terraform init \
          -backend-config="resource_group_name=rg-mcp-tfstate" \
          -backend-config="storage_account_name=stmcptfstate" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=mcp-${TF_WORKSPACE}.tfstate"
        
    - name: Select or Create Terraform Workspace
      id: workspace
      working-directory: environments/${TF_WORKSPACE}
      run: |
        echo "Available workspaces:"
        terraform workspace list || true
        echo "Attempting to select or create workspace: ${TF_WORKSPACE}"
        if ! terraform workspace select ${TF_WORKSPACE} 2>/dev/null; then
          echo "Creating new workspace: ${TF_WORKSPACE}"
          terraform workspace new ${TF_WORKSPACE}
        fi
        echo "Current workspace:"
        terraform workspace show

    - name: Terraform Validate
      id: validate
      working-directory: environments/${TF_WORKSPACE}
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      working-directory: environments/${TF_WORKSPACE}
      run: |
        terraform plan -no-color -input=false -detailed-exitcode -out=tfplan 2>&1 | tee plan_output.txt
        echo "PLAN_OUTPUT<<EOF" >> $GITHUB_ENV
        cat plan_output.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ env.PLAN_OUTPUT }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `### Terraform Plan Results for \`${process.env.TF_WORKSPACE}\` environment 🚀

          #### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
          ${steps.fmt.outcome == 'failure' ? '❌ Running terraform fmt suggested changes. Please run terraform fmt on your code.' : '✅ Code style is acceptable'}

          #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
          ${steps.init.outcome == 'failure' ? '❌ Error during terraform init. Check the logs for more details.' : '✅ Terraform has been successfully initialized'}

          #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
          ${steps.validate.outcome == 'failure' ? '❌ Validation failed. Check the logs for more details.' : '✅ Terraform configuration is valid'}

          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          *Working Directory: \`environments/${process.env.TF_WORKSPACE}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        exitcode=$?
        if [ $exitcode -eq 1 ]; then
          echo "Terraform plan failed"
          exit 1
        fi
        if [ $exitcode -eq 2 ]; then
          echo "Terraform plan has changes"
          exit 0
        fi

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: environments/${TF_WORKSPACE}
      run: |
        echo "🚀 Applying Terraform plan for ${TF_WORKSPACE} environment..."
        terraform apply -auto-approve -input=false tfplan
